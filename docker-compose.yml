# proID/docker-compose.yml
version: '3.9'

services:
  db:
    image: postgres:16-alpine
    container_name: proid_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - proid-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    container_name: proid_backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      PORT: ${BACKEND_INTERNAL_PORT}
      JWT_SECRET: ${JWT_SECRET}
    volumes:
      - ./backend/src:/app/src
    networks:
      - proid-network
    command: npm run dev

  frontend:
    container_name: proid_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    networks:
      - proid-network
    environment:
      NODE_ENV: development
      VITE_API_BASE_URL: /api # Route API calls through Nginx proxy
    command: npm run dev -- --host

  nginx:
    container_name: proid_proxy
    image: nginx:stable-alpine
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - proid-network

networks:
  proid-network:
    driver: bridge

volumes:
  postgres_data: