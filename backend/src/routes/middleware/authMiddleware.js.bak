// proID/backend/src/middleware/authMiddleware.js
const jwt = require('jsonwebtoken');
const { pool } = require('../db'); // Import pool (optional, but often useful)

const protect = async (req, res, next) => {
    let token;

    // 1. Check for token in Authorization header (format: "Bearer <token>")
    if (
        req.headers.authorization &&
        req.headers.authorization.startsWith('Bearer')
    ) {
        try {
            // 2. Extract token from "Bearer <token>" string
            token = req.headers.authorization.split(' ')[1];

            // 3. Verify token using the secret key
            // This checks signature and expiration
            const decoded = jwt.verify(token, process.env.JWT_SECRET);

            // --- Token is valid ---

            // 4. Attach user id (from payload) to the request object
            // The route handler can now access req.userId
            req.userId = decoded.userId;

            // Optional: You could fetch the full user from DB here if needed
            // const currentUser = await pool.query('SELECT user_id, email, name FROM users WHERE user_id = $1', [req.userId]);
            // if (currentUser.rows.length === 0) { throw new Error('User not found'); }
            // req.user = currentUser.rows[0];

            next(); // 5. Proceed to the next middleware or route handler

        } catch (error) {
            // Token verification failed (invalid signature, expired, etc.)
            console.error('Token verification failed:', error.message);
            // Send 401 Unauthorized
            res.status(401).json({ message: 'Not authorized, token failed.' });
        }
    }

    // If no token was found in the header at all
    if (!token) {
         // Send 401 Unauthorized
        res.status(401).json({ message: 'Not authorized, no token.' });
    }
};

module.exports = { protect }; // Export the middleware function